// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - linked to Clerk Auth
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files     File[]
  folders   Folder[]

  @@map("users")
}

// Folder model
model Folder {
  id          String   @id @default(cuid())
  name        String
  path        String   // Full path like "/documents/work"
  parentId    String?  // Reference to parent folder
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  files       File[]

  @@unique([userId, path])
  @@map("folders")
}

// File model
model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  path        String   // Full path like "/documents/work/project.pdf"
  url         String?  // UploadThing URL
  size        Int      // File size in bytes
  mimeType    String   // MIME type like "application/pdf"
  extension   String   // File extension like "pdf"
  folderId    String?  // Reference to parent folder
  userId      String
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?  @relation(fields: [folderId], references: [id])
  shares      FileShare[]

  @@unique([userId, path])
  @@map("files")
}

// File sharing model
model FileShare {
  id          String   @id @default(cuid())
  fileId      String
  sharedBy    String   // User ID who shared
  sharedWith  String?  // User ID who can access (null for public)
  token       String   @unique @default(cuid())
  isPublic    Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_shares")
}
